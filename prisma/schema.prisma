generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  credits       Decimal   @default(0) @db.Decimal(10, 2)
  tier          String    @default("basic")
  stripeCustomerId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  generations  Generation[]
  transactions CreditTransaction[]
  workflows    Workflow[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Generation {
  id          String   @id @default(cuid())
  userId      String
  provider    String
  service     String
  parameters  Json
  status      String   @default("pending")
  resultUrl   String?
  cost        Decimal  @db.Decimal(8, 4)
  createdAt   DateTime @default(now())
  completedAt DateTime?
  errorMessage String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model CreditTransaction {
  id              String   @id @default(cuid())
  userId          String
  amount          Decimal  @db.Decimal(10, 2)
  type            String   // "purchase", "usage", "refund"
  description     String
  stripePaymentId String?
  generationId    String?
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model Workflow {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  steps       Json     // Array of workflow steps
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPublic])
}

model Provider {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String   // "image", "video", "audio", "3d", "text"
  displayName String
  description String
  logoUrl     String?
  baseUrl     String
  apiKey      String?
  isActive    Boolean  @default(true)
  config      Json     // Provider-specific configuration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  services Service[]

  @@index([category])
  @@index([isActive])
}

model Service {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  displayName String
  description String
  category    String
  pricing     Json     // Pricing structure
  parameters  Json     // Available parameters
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([category])
  @@index([isActive])
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  name      String
  key       String   @unique
  lastUsed  DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([key])
}